#!/bin/bash

# do this stuff in a tmp dir
cd "$(dirname "$0")/.."
project_root=`pwd`
mkdir -p tmp
cd tmp

# this is basically a shitty version of `gem unpack`
get_gem() {
  name="$1"
  url="$2"

  if test -d "$name"
  then
    echo "Skipping download of $name"
    return
  else
    echo "Downloading $name"
  fi

  mkdir "$name" &&
  cd "$name" &&
  curl -L "$url" > "$name".gem &&
  tar -xf "$name".gem &&
  gunzip data.tar.gz &&
  tar -xf data.tar &&
  cd ..
}

# download dependencies
get_gem "rspec"              "https://rubygems.org/downloads/rspec-3.2.0.gem" &&
get_gem "rspec-core"         "https://rubygems.org/downloads/rspec-core-3.2.1.gem" &&
get_gem "rspec-support"      "https://rubygems.org/downloads/rspec-support-3.2.2.gem" &&
get_gem "rspec-expectations" "https://rubygems.org/downloads/rspec-expectations-3.2.0.gem" &&
get_gem "rspec-mocks"        "https://rubygems.org/downloads/rspec-mocks-3.2.1.gem" &&
get_gem "diff-lcs"           "https://rubygems.org/downloads/diff-lcs-1.2.5.gem" || exit 1


# run specs
# as the paths might have spaces in them, which need to be quoted,
# but the args themselves are space delimited,
# so some spaces in here need to be quoted, but some don't.
#
# Currently it's not a problem, but still would like to do it right.
# So, is there a way to essentially get it to act like "$@" rather than "$*" and $*
# https://s3.amazonaws.com/josh.cheek/images/scratch/bash-arg-quoting.png
cd "$project_root"

export PATH="$project_root/tmp/rspec-core/exe:$PATH"

opts=""
opts=" -I $project_root/tmp/diff-lcs/lib $opts"
opts=" -I $project_root/tmp/rspec/lib $opts"
opts=" -I $project_root/tmp/rspec-core/lib $opts"
opts=" -I $project_root/tmp/rspec-expectations/lib $opts"
opts=" -I $project_root/tmp/rspec-mocks/lib $opts"
opts=" -I $project_root/tmp/rspec-support/lib $opts"

if `ruby -e "exit RUBY_VERSION != '1.8.7'"`
then
  opts="--disable-gems $opts"
fi

ruby $opts -S rspec
